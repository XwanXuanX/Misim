{
  "add" : {
    "type" : "R",
    "usage" : "Add registers"
  },
  "sub" : {
    "type" : "R",
    "usage" : "Subtract registers"
  },
  "sra" : {
    "type" : "R",
    "usage" : "Shift right arithmetic by register"
  },
  "slt" : {
    "type" : "R",
    "usage" : "Set if less than register, 2's complement"
  },
  "addi" : {
    "type" : "I",
    "usage" : "Add immediate"
  },
  "srai" : {
    "type" : "I",
    "usage" : "Shift right arithmetic by immediate"
  },
  "slti" : {
    "type" : "I",
    "usage" : "Set if less than immediate, 2's complement"
  },
  "mul" : {
    "type" : "R",
    "usage" : "Multiply and return lower bits"
  },
  "mulh" : {
    "type" : "R",
    "usage" : "Multiply signed and return upper bits"
  },
  "mulhu" : {
    "type" : "R",
    "usage" : "Multiply unsigned and return upper bits"
  },
  "mulhsu" : {
    "type" : "R",
    "usage" : "Multiply signed-unsigned and return upper bits"
  },
  "div" : {
    "type" : "R",
    "usage" : "Signed division"
  },
  "divu" : {
    "type" : "R",
    "usage" : "Unsigned division"
  },
  "rem" : {
    "type" : "R",
    "usage" : "Signed remainder"
  },
  "remu" : {
    "type" : "R",
    "usage" : "Unsigned remainder"
  },
  "sll" : {
    "type" : "R",
    "usage" : "Shift left logical by register"
  },
  "srl" : {
    "type" : "R",
    "usage" : "Shift right logical by register"
  },
  "and" : {
    "type" : "R",
    "usage" : "Bitwise AND with register"
  },
  "or" : {
    "type" : "R",
    "usage" : "Bitwise OR with register"
  },
  "xor" : {
    "type" : "R",
    "usage" : "Bitwise XOR with register"
  },
  "sltu" : {
    "type" : "R",
    "usage" : "Set if less than register, unsigned"
  },
  "slli" : {
    "type" : "I",
    "usage" : "Shift left logical by immediate"
  },
  "srli" : {
    "type" : "I",
    "usage" : "Shift right logical by immediate"
  },
  "andi" : {
    "type" : "I",
    "usage" : "Bitwise AND with immediate"
  },
  "ori" : {
    "type" : "I",
    "usage" : "Bitwise OR with immediate"
  },
  "xori" : {
    "type" : "I",
    "usage" : "Bitwise XOR with immediate"
  },
  "sltiu" : {
    "type" : "I",
    "usage" : "Set if less than immediate, unsigned"
  },
  "rll" : {
    "type" : "R",
    "usage" : "Rotate left logical by register"
  },
  "rlli" : {
    "type" : "I",
    "usage" : "Rotate left logical by immediate"
  },
  "rrl" : {
    "type" : "R",
    "usage" : "Rotate right logical by register"
  },
  "rrli" : {
    "type" : "I",
    "usage" : "Rotate right logical by immediate"
  },
  "lui" : {
    "type" : "U",
    "usage" : "Load upper immediate"
  },
  "lb" : {
    "type" : "I",
    "usage" : "Load byte, signed (sign-extend)"
  },
  "lbu" : {
    "type" : "I",
    "usage" : "Load byte, unsigned (zero-extend)"
  },
  "lh" : {
    "type" : "I",
    "usage" : "Load half-word, signed (sign-extend)"
  },
  "lhu" : {
    "type" : "I",
    "usage" : "Load half-word, unsigned (zero-extend)"
  },
  "lw" : {
    "type" : "I",
    "usage" : "Load word"
  },
  "sb" : {
    "type" : "S",
    "usage" : "Store byte"
  },
  "sh" : {
    "type" : "S",
    "usage" : "Store half-word"
  },
  "sw" : {
    "type" : "S",
    "usage" : "Store word"
  },
  "beq" : {
    "type" : "SB",
    "usage" : "Branch if equal"
  },
  "bne" : {
    "type" : "SB",
    "usage" : "Branch if not equal"
  },
  "blt" : {
    "type" : "SB",
    "usage" : "Branch if less than, 2's complement"
  },
  "bltu" : {
    "type" : "SB",
    "usage" : "Branch if less than, unsigned"
  },
  "bge" : {
    "type" : "SB",
    "usage" : "Branch if greater or equal, 2's complement"
  },
  "bgeu" : {
    "type" : "SB",
    "usage" : "Branch if greater or equal, unsigned"
  },
  "bz" : {
    "type" : "U",
    "usage" : "Branch if Z flag set"
  },
  "bc" : {
    "type" : "U",
    "usage" : "Branch if C flag set"
  },
  "bv" : {
    "type" : "U",
    "usage" : "Branch if V flag set"
  },
  "bn" : {
    "type" : "U",
    "usage" : "Branch if N flag set"
  },
  "scall" : {
    "type" : "I",
    "usage" : "System call"
  }
}
